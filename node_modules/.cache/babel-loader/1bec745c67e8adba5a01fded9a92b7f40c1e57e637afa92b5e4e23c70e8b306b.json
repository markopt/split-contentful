{"ast":null,"code":"var _jsxFileName = \"/Users/markhuntley/Code/contentful-integration/split/src/locations/EntryEditor.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Paragraph } from '@contentful/f36-components';\nimport { /* useCMA, */useSDK } from '@contentful/react-apps-toolkit';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Entry = () => {\n  _s();\n  const sdk = useSDK();\n  /*\n     To use the cma, inject it as follows.\n     If it is not needed, you can remove the next line.\n  */\n  // const cma = useCMA();\n\n  //  Set this to featureFlag and treatmentItems once we run the migration scripts\n  const CONTENT_FIELD_ID = 'cta';\n  const contentField = sdk.entry.fields(CONTENT_FIELD_ID);\n  sdk.field.setValue(\"hello world\");\n  console.log(contentField);\n  console.log('hello world from entry editor');\n  // const experiment = useState(contentField.getValue());\n\n  // const [ctaText, setCtaText] = useState(contentField.getValue());\n\n  // Listen for onChange events and update the value\n  // useEffect(async() => {\n  //   if (contentField) {\n  //     await sdk.field.setValue(\"hello world\")\n  //   } \n  // }, [contentField]);\n\n  // need to invoke split-client to pull in tagged experiments for use in dropdown\n  // const experimentList = Object.keys(experiments).map((feature) => {\n  //   return (\n  //     <FeatureList\n  //       name={feature.name}\n  //       // feature={feature as AIFeature}\n  //       // isSaving={isSaving}\n  //       // onSaving={handleSaving}\n  //     />\n  //   );\n  // });\n\n  // const readingTime = (text) => {\n  //   const wordCount = text.split(' ').length;\n  //   const minutes = Math.ceil(wordCount / WORDS_PER_MINUTE);\n  //   return {\n  //     words: wordCount,\n  //     text: `${minutes} min read`,\n  //   };\n  // };\n\n  // Calculate the metrics based on the new value\n  // const stats = readingTime(blogText || '');\n\n  return /*#__PURE__*/_jsxDEV(Paragraph, {\n    children: [\"Hello Cole Man (AppId: \", sdk.ids.app, \")\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 10\n  }, this);\n};\n_s(Entry, \"m0NK9T07Wix4wkTNxkKFby+6qME=\", false, function () {\n  return [useSDK];\n});\n_c = Entry;\nexport default Entry;\nvar _c;\n$RefreshReg$(_c, \"Entry\");","map":{"version":3,"names":["React","useState","useEffect","Paragraph","useSDK","jsxDEV","_jsxDEV","Entry","_s","sdk","CONTENT_FIELD_ID","contentField","entry","fields","field","setValue","console","log","children","ids","app","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/markhuntley/Code/contentful-integration/split/src/locations/EntryEditor.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Paragraph } from '@contentful/f36-components';\nimport { /* useCMA, */ useSDK } from '@contentful/react-apps-toolkit';\n\nconst Entry = () => {\n  const sdk = useSDK();\n  /*\n     To use the cma, inject it as follows.\n     If it is not needed, you can remove the next line.\n  */\n  // const cma = useCMA();\n\n  //  Set this to featureFlag and treatmentItems once we run the migration scripts\n  const CONTENT_FIELD_ID = 'cta';\n\n  const contentField = sdk.entry.fields(CONTENT_FIELD_ID);\n  sdk.field.setValue(\"hello world\");\n  console.log(contentField)\n  console.log('hello world from entry editor');\n // const experiment = useState(contentField.getValue());\n\n\n\n  // const [ctaText, setCtaText] = useState(contentField.getValue());\n\n\n\n  // Listen for onChange events and update the value\n  // useEffect(async() => {\n  //   if (contentField) {\n  //     await sdk.field.setValue(\"hello world\")\n  //   } \n  // }, [contentField]);\n\n  // need to invoke split-client to pull in tagged experiments for use in dropdown\n  // const experimentList = Object.keys(experiments).map((feature) => {\n  //   return (\n  //     <FeatureList\n  //       name={feature.name}\n  //       // feature={feature as AIFeature}\n  //       // isSaving={isSaving}\n  //       // onSaving={handleSaving}\n  //     />\n  //   );\n  // });\n\n  // const readingTime = (text) => {\n  //   const wordCount = text.split(' ').length;\n  //   const minutes = Math.ceil(wordCount / WORDS_PER_MINUTE);\n  //   return {\n  //     words: wordCount,\n  //     text: `${minutes} min read`,\n  //   };\n  // };\n\n  // Calculate the metrics based on the new value\n  // const stats = readingTime(blogText || '');\n\n  return <Paragraph>Hello Cole Man (AppId: {sdk.ids.app})</Paragraph>;\n};\n\nexport default Entry;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,SAAS,QAAQ,4BAA4B;AACtD,SAAS,aAAcC,MAAM,QAAQ,gCAAgC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtE,MAAMC,KAAK,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClB,MAAMC,GAAG,GAAGL,MAAM,CAAC,CAAC;EACpB;AACF;AACA;AACA;EACE;;EAEA;EACA,MAAMM,gBAAgB,GAAG,KAAK;EAE9B,MAAMC,YAAY,GAAGF,GAAG,CAACG,KAAK,CAACC,MAAM,CAACH,gBAAgB,CAAC;EACvDD,GAAG,CAACK,KAAK,CAACC,QAAQ,CAAC,aAAa,CAAC;EACjCC,OAAO,CAACC,GAAG,CAACN,YAAY,CAAC;EACzBK,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;EAC7C;;EAIC;;EAIA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAEA,oBAAOX,OAAA,CAACH,SAAS;IAAAe,QAAA,GAAC,yBAAuB,EAACT,GAAG,CAACU,GAAG,CAACC,GAAG,EAAC,GAAC;EAAA;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAW,CAAC;AACrE,CAAC;AAAChB,EAAA,CAvDID,KAAK;EAAA,QACGH,MAAM;AAAA;AAAAqB,EAAA,GADdlB,KAAK;AAyDX,eAAeA,KAAK;AAAC,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}