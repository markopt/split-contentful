{"ast":null,"code":"import s from 'react';\nimport { cx, css } from 'emotion';\nimport { Box } from '@contentful/f36-core';\nimport i from '@contentful/f36-tokens';\nimport { ClockIcon } from '@contentful/f36-icons';\nvar Y = Object.defineProperty,\n  Z = Object.defineProperties;\nvar K = Object.getOwnPropertyDescriptors;\nvar v = Object.getOwnPropertySymbols;\nvar k = Object.prototype.hasOwnProperty,\n  T = Object.prototype.propertyIsEnumerable;\nvar N = (e, r, t) => r in e ? Y(e, r, {\n    enumerable: !0,\n    configurable: !0,\n    writable: !0,\n    value: t\n  }) : e[r] = t,\n  p = (e, r) => {\n    for (var t in r || (r = {})) k.call(r, t) && N(e, t, r[t]);\n    if (v) for (var t of v(r)) T.call(r, t) && N(e, t, r[t]);\n    return e;\n  },\n  I = (e, r) => Z(e, K(r));\nvar x = (e, r) => {\n  var t = {};\n  for (var a in e) k.call(e, a) && r.indexOf(a) < 0 && (t[a] = e[a]);\n  if (e != null && v) for (var a of v(e)) r.indexOf(a) < 0 && T.call(e, a) && (t[a] = e[a]);\n  return t;\n};\nvar Q = ({\n    variant: e\n  }) => {\n    switch (e) {\n      case \"positive\":\n        return {\n          color: i.green600,\n          backgroundColor: i.green200\n        };\n      case \"primary\":\n        return {\n          color: i.blue600,\n          backgroundColor: i.blue200\n        };\n      case \"negative\":\n        return {\n          color: i.red600,\n          backgroundColor: i.red200\n        };\n      case \"warning\":\n        return {\n          color: i.orange600,\n          backgroundColor: i.orange200\n        };\n      case \"secondary\":\n        return {\n          color: i.gray700,\n          backgroundColor: i.gray200\n        };\n      case \"primary-filled\":\n        return {\n          color: i.colorWhite,\n          backgroundColor: i.blue600\n        };\n      case \"featured\":\n        return {\n          color: i.purple600,\n          backgroundColor: i.purple200\n        };\n      default:\n        return {};\n    }\n  },\n  ee = ({\n    size: e\n  }) => {\n    switch (e) {\n      case \"small\":\n        return {\n          padding: `0 ${i.spacing2Xs}`,\n          lineHeight: i.lineHeightS,\n          maxHeight: i.lineHeightS\n        };\n      default:\n        return {\n          padding: `0 ${i.spacingXs}`,\n          lineHeight: i.lineHeightM,\n          maxHeight: i.lineHeightM\n        };\n    }\n  },\n  O = () => ({\n    badge: ({\n      variant: e,\n      size: r\n    }) => css(p(p({\n      columnGap: i.spacing2Xs,\n      alignItems: \"center\",\n      borderRadius: i.borderRadiusSmall,\n      overflow: \"hidden\",\n      verticalAlign: \"middle\"\n    }, Q({\n      variant: e\n    })), ee({\n      size: r\n    }))),\n    badgeIcon: css({\n      flexShrink: 0\n    }),\n    badgeText: css({\n      color: \"currentcolor\",\n      lineHeight: \"inherit\",\n      textTransform: \"lowercase\",\n      \"::first-letter\": {\n        textTransform: \"uppercase\"\n      }\n    })\n  });\nvar ae = Object.defineProperty,\n  ne = Object.defineProperties,\n  ie = Object.getOwnPropertyDescriptors,\n  b = Object.getOwnPropertySymbols,\n  X = Object.prototype.hasOwnProperty,\n  j = Object.prototype.propertyIsEnumerable,\n  R = (e, r, t) => r in e ? ae(e, r, {\n    enumerable: !0,\n    configurable: !0,\n    writable: !0,\n    value: t\n  }) : e[r] = t,\n  g = (e, r) => {\n    for (var t in r || (r = {})) X.call(r, t) && R(e, t, r[t]);\n    if (b) for (var t of b(r)) j.call(r, t) && R(e, t, r[t]);\n    return e;\n  },\n  f = (e, r) => ne(e, ie(r)),\n  m = (e, r) => {\n    var t = {};\n    for (var a in e) X.call(e, a) && r.indexOf(a) < 0 && (t[a] = e[a]);\n    if (e != null && b) for (var a of b(e)) r.indexOf(a) < 0 && j.call(e, a) && (t[a] = e[a]);\n    return t;\n  },\n  oe = \"span\";\nfunction se() {\n  return css({\n    overflow: \"hidden\",\n    textOverflow: \"ellipsis\",\n    whiteSpace: \"nowrap\",\n    maxWidth: \"100%\"\n  });\n}\nfunction le() {\n  return css({\n    wordBreak: \"break-word\"\n  });\n}\nfunction D(e, r) {\n  var t = e,\n    {\n      fontSize: a = \"fontSizeM\",\n      fontStack: n = \"fontStackPrimary\",\n      fontWeight: o = \"fontWeightNormal\",\n      fontColor: l = \"gray800\",\n      lineHeight: c = \"lineHeightM\",\n      children: d,\n      isTruncated: H,\n      isWordBreak: w,\n      as: y,\n      className: S,\n      margin: B = \"none\"\n    } = t,\n    A = m(t, [\"fontSize\", \"fontStack\", \"fontWeight\", \"fontColor\", \"lineHeight\", \"children\", \"isTruncated\", \"isWordBreak\", \"as\", \"className\", \"margin\"]);\n  let J = y || oe;\n  return s.createElement(Box, f(g({}, A), {\n    as: J,\n    className: cx(css({\n      padding: 0,\n      fontFamily: i[n],\n      fontWeight: i[o],\n      color: i[l],\n      fontSize: i[a],\n      lineHeight: i[c]\n    }), H ? se() : null, w ? le() : null, S),\n    margin: B,\n    ref: r\n  }), d);\n}\nD.displayName = \"Text\";\nvar h = s.forwardRef(D),\n  de = \"span\";\nfunction L(e, r) {\n  var t = e,\n    {\n      children: a,\n      fontWeight: n = \"fontWeightNormal\",\n      testId: o = \"cf-ui-caption\"\n    } = t,\n    l = m(t, [\"children\", \"fontWeight\", \"testId\"]);\n  return s.createElement(h, f(g({\n    as: de,\n    testId: o,\n    fontSize: \"fontSizeS\",\n    lineHeight: \"lineHeightS\",\n    fontColor: \"gray900\",\n    fontWeight: n\n  }, l), {\n    ref: r\n  }), a);\n}\nL.displayName = \"Caption\";\nvar V = s.forwardRef(L),\n  ce = \"h1\";\nfunction U(e, r) {\n  var t = e,\n    {\n      children: a,\n      testId: n = \"cf-ui-heading\"\n    } = t,\n    o = m(t, [\"children\", \"testId\"]);\n  return s.createElement(h, f(g({\n    as: ce,\n    testId: n,\n    marginBottom: \"spacingM\",\n    fontWeight: \"fontWeightDemiBold\",\n    fontColor: \"gray900\",\n    fontSize: \"fontSizeXl\",\n    lineHeight: \"lineHeightXl\"\n  }, o), {\n    ref: r\n  }), a);\n}\nU.displayName = \"Heading\";\ns.forwardRef(U);\nvar pe = \"h3\";\nfunction F(e, r) {\n  var t = e,\n    {\n      children: a,\n      testId: n = \"cf-ui-subheading\"\n    } = t,\n    o = m(t, [\"children\", \"testId\"]);\n  return s.createElement(h, f(g({\n    as: pe,\n    testId: n,\n    marginBottom: \"spacingM\",\n    fontSize: \"fontSizeL\",\n    lineHeight: \"lineHeightL\",\n    fontWeight: \"fontWeightDemiBold\",\n    fontColor: \"gray900\"\n  }, o), {\n    ref: r\n  }), a);\n}\nF.displayName = \"Subheading\";\ns.forwardRef(F);\nvar fe = \"h2\";\nfunction $(e, r) {\n  var t = e,\n    {\n      children: a,\n      size: n = \"default\",\n      testId: o = \"cf-ui-display-text\"\n    } = t,\n    l = m(t, [\"children\", \"size\", \"testId\"]);\n  let c = \"fontSize2Xl\",\n    d = \"lineHeight2Xl\";\n  return n === \"large\" && (c = \"fontSize3Xl\", d = \"lineHeight3Xl\"), s.createElement(h, f(g({\n    as: fe,\n    testId: o,\n    marginBottom: n === \"default\" ? \"spacingL\" : \"spacingXl\",\n    fontSize: c,\n    lineHeight: d,\n    fontColor: \"gray900\",\n    fontWeight: \"fontWeightDemiBold\"\n  }, l), {\n    ref: r\n  }), a);\n}\n$.displayName = \"DisplayText\";\ns.forwardRef($);\nvar me = \"h2\";\nfunction G(e, r) {\n  var t = e,\n    {\n      children: a,\n      className: n,\n      testId: o = \"cf-ui-section-heading\"\n    } = t,\n    l = m(t, [\"children\", \"className\", \"testId\"]);\n  return s.createElement(h, f(g({\n    as: me,\n    testId: o,\n    marginBottom: \"spacingL\",\n    fontWeight: \"fontWeightDemiBold\",\n    fontColor: \"gray900\",\n    fontSize: \"fontSizeS\",\n    lineHeight: \"lineHeightS\",\n    className: cx(css({\n      letterSpacing: i.letterSpacingWide,\n      textTransform: \"uppercase\"\n    }), n)\n  }, l), {\n    ref: r\n  }), a);\n}\nG.displayName = \"SectionHeading\";\ns.forwardRef(G);\nvar ue = s.forwardRef((e, r) => {\n  var t = e,\n    {\n      children: a,\n      testId: n = \"cf-ui-paragraph\"\n    } = t,\n    o = m(t, [\"children\", \"testId\"]);\n  return s.createElement(h, f(g({\n    as: \"p\",\n    testId: n,\n    marginBottom: \"spacingM\",\n    lineHeight: \"lineHeightM\"\n  }, o), {\n    ref: r\n  }), a);\n});\nue.displayName = \"Paragraph\";\nvar E = s.forwardRef((e, r) => {\n  let t = O(),\n    S = e,\n    {\n      children: a,\n      variant: n = \"primary\",\n      size: o = \"default\",\n      testId: l = \"cf-ui-badge\",\n      startIcon: c,\n      endIcon: d,\n      className: H\n    } = S,\n    w = x(S, [\"children\", \"variant\", \"size\", \"testId\", \"startIcon\", \"endIcon\", \"className\"]),\n    y = B => s.cloneElement(B, {\n      size: \"tiny\",\n      className: cx(t.badgeIcon, B.props.className),\n      variant: n === \"primary-filled\" ? \"white\" : n\n    });\n  return s.createElement(Box, I(p({\n    as: \"div\",\n    testId: l,\n    display: \"inline-flex\",\n    className: cx(t.badge({\n      variant: n,\n      size: o\n    }), H)\n  }, w), {\n    ref: r\n  }), c && o === \"default\" && y(c), s.createElement(V, {\n    fontWeight: \"fontWeightMedium\",\n    isTruncated: !0,\n    className: t.badgeText\n  }, a), d && o === \"default\" && y(d));\n});\nE.displayName = \"Badge\";\nvar Se = {\n  published: \"positive\",\n  draft: \"warning\",\n  archived: \"secondary\",\n  changed: \"primary\",\n  deleted: \"negative\",\n  new: \"primary-filled\"\n};\nfunction q(e, r) {\n  let d = e,\n    {\n      entityStatus: t,\n      isScheduled: a = void 0,\n      size: n = \"default\"\n    } = d,\n    o = x(d, [\"entityStatus\", \"isScheduled\", \"size\"]),\n    l = a && n === \"default\",\n    c = Se[t];\n  return s.createElement(E, I(p(p({}, o), l ? {\n    size: n,\n    startIcon: s.createElement(ClockIcon, {\n      testId: \"schedule-icon\"\n    })\n  } : {\n    size: n\n  }), {\n    variant: c,\n    ref: r\n  }), t);\n}\nq.displayName = \"EntityStatusBadge\";\nvar Be = s.forwardRef(q);\nexport { E as Badge, Be as EntityStatusBadge };","map":{"version":3,"names":[],"sources":["/Users/markhuntley/Code/contentful-integration/split/node_modules/@contentful/f36-badge/src/Badge/Badge.tsx","/Users/markhuntley/Code/contentful-integration/split/node_modules/@contentful/f36-badge/src/Badge/Badge.styles.ts","/Users/markhuntley/Code/contentful-integration/split/node_modules/@contentful/f36-badge/src/EntityStatusBadge/EntityStatusBadge.tsx"],"sourcesContent":["import React from 'react';\nimport { cx } from 'emotion';\nimport {\n  Box,\n  type CommonProps,\n  type PropsWithHTMLElement,\n  type ExpandProps,\n  type PickUnion,\n} from '@contentful/f36-core';\n\nimport type { BadgeSize, BadgeVariant } from '../types';\nimport { getBadgeStyles } from './Badge.styles';\nimport { Caption } from '@contentful/f36-typography';\n\ntype BadgeSizeWithIconProps =\n  | {\n      /**\n       * Sets the size of the component\n       * @default default\n       */\n      size?: Exclude<BadgeSize, 'small'>;\n      /**\n       * Expects any of the icon components. Renders the icon aligned to the start\n       */\n      startIcon?: React.ReactElement;\n      /**\n       * Expects any of the icon components. Renders the icon aligned to the end\n       */\n      endIcon?: React.ReactElement;\n    }\n  | {\n      /**\n       * Sets the size of the component\n       * @default default\n       */\n      size: PickUnion<BadgeSize, 'small'>;\n      // We use discriminative union typing, so in case the size is set as small we don't allow startIcon or endIcon\n      startIcon?: never;\n      endIcon?: never;\n    };\n\nexport type BadgeInternalProps = CommonProps &\n  BadgeSizeWithIconProps & {\n    /**\n     * Determines the variation of the component\n     * @default primary\n     */\n    variant?: BadgeVariant;\n\n    children: React.ReactNode;\n  };\n\nexport type BadgeProps = PropsWithHTMLElement<BadgeInternalProps, 'div'>;\n\nexport const Badge = React.forwardRef<HTMLDivElement, ExpandProps<BadgeProps>>(\n  (props, ref) => {\n    const styles = getBadgeStyles();\n    const {\n      children,\n      variant = 'primary',\n      size = 'default',\n      testId = 'cf-ui-badge',\n      startIcon,\n      endIcon,\n      className,\n      ...otherProps\n    } = props;\n\n    const iconContent = (icon) =>\n      React.cloneElement(icon, {\n        size: 'tiny',\n        className: cx(styles.badgeIcon, icon.props.className),\n        variant: variant === 'primary-filled' ? 'white' : variant,\n      });\n\n    return (\n      <Box\n        as=\"div\"\n        testId={testId}\n        display=\"inline-flex\"\n        className={cx(styles.badge({ variant, size }), className)}\n        {...otherProps}\n        ref={ref}\n      >\n        {startIcon && size === 'default' && iconContent(startIcon)}\n        <Caption\n          fontWeight=\"fontWeightMedium\"\n          isTruncated\n          className={styles.badgeText}\n        >\n          {children}\n        </Caption>\n        {endIcon && size === 'default' && iconContent(endIcon)}\n      </Box>\n    );\n  },\n);\n\nBadge.displayName = 'Badge';\n","import tokens from '@contentful/f36-tokens';\nimport { css } from 'emotion';\nimport type { BadgeVariant, BadgeSize, BadgeStylesProps } from '../types';\nimport type { CSSObject } from '@emotion/serialize';\n\nconst variantToStyles = ({ variant }: { variant: BadgeVariant }): CSSObject => {\n  switch (variant) {\n    case 'positive':\n      return {\n        color: tokens.green600,\n        backgroundColor: tokens.green200,\n      };\n    case 'primary':\n      return {\n        color: tokens.blue600,\n        backgroundColor: tokens.blue200,\n      };\n    case 'negative':\n      return {\n        color: tokens.red600,\n        backgroundColor: tokens.red200,\n      };\n    case 'warning':\n      return {\n        color: tokens.orange600,\n        backgroundColor: tokens.orange200,\n      };\n    case 'secondary':\n      return {\n        color: tokens.gray700,\n        backgroundColor: tokens.gray200,\n      };\n    case 'primary-filled':\n      return {\n        color: tokens.colorWhite,\n        backgroundColor: tokens.blue600,\n      };\n    case 'featured':\n      return {\n        color: tokens.purple600,\n        backgroundColor: tokens.purple200,\n      };\n    default:\n      return {};\n  }\n};\n\nconst sizeToStyles = ({ size }: { size: BadgeSize }): CSSObject => {\n  switch (size) {\n    case 'small':\n      return {\n        padding: `0 ${tokens.spacing2Xs}`,\n        lineHeight: tokens.lineHeightS,\n        maxHeight: tokens.lineHeightS,\n      };\n    default:\n      return {\n        padding: `0 ${tokens.spacingXs}`,\n        lineHeight: tokens.lineHeightM,\n        maxHeight: tokens.lineHeightM,\n      };\n  }\n};\n\nexport const getBadgeStyles = () => ({\n  badge: ({ variant, size }: BadgeStylesProps) =>\n    css({\n      columnGap: tokens.spacing2Xs,\n      alignItems: 'center',\n      borderRadius: tokens.borderRadiusSmall,\n      overflow: 'hidden',\n      verticalAlign: 'middle',\n      ...variantToStyles({ variant }),\n      ...sizeToStyles({ size }),\n    }),\n  badgeIcon: css({\n    flexShrink: 0,\n  }),\n  badgeText: css({\n    color: 'currentcolor',\n    lineHeight: 'inherit',\n    textTransform: 'lowercase',\n    '::first-letter': {\n      textTransform: 'uppercase',\n    },\n  }),\n});\n","import React from 'react';\nimport type {\n  EntityStatus,\n  ExpandProps,\n  PickUnion,\n} from '@contentful/f36-core';\nimport { ClockIcon } from '@contentful/f36-icons';\n\nimport { Badge, type BadgeProps } from '../Badge/Badge';\nimport type { BadgeSize, BadgeVariant } from '../types';\n\nconst statusMap: { [key in EntityStatus]: BadgeVariant } = {\n  published: 'positive',\n  draft: 'warning',\n  archived: 'secondary',\n  changed: 'primary',\n  deleted: 'negative',\n  new: 'primary-filled',\n};\n\ntype BadgeSizeWithIsScheduledProp =\n  | {\n      /**\n       * Sets the size of the component\n       * @default default\n       */\n      size?: Exclude<BadgeSize, 'small'>;\n      /**\n       * Indicates that the entity that the badge is related to has a scheduled action\n       */\n      isScheduled?: boolean;\n    }\n  | {\n      /**\n       * Sets the size of the component\n       * @default default\n       */\n      size: PickUnion<BadgeSize, 'small'>;\n      // We use discriminative union typing, so in case the size is set as small we don't allow isScheduled\n      isScheduled?: never;\n    };\n\nexport type EntityStatusBadgeProps = Omit<\n  BadgeProps,\n  'children' | 'endIcon' | 'size' | 'startIcon' | 'variant'\n> &\n  BadgeSizeWithIsScheduledProp & {\n    entityStatus: EntityStatus;\n  };\n\nfunction EntityStatusBadge(\n  props: EntityStatusBadgeProps,\n  ref: React.Ref<HTMLDivElement>,\n) {\n  const {\n    entityStatus,\n    isScheduled = undefined,\n    size = 'default',\n    ...otherProps\n  } = props;\n  const withClockIcon = isScheduled && size === 'default';\n  const variant = statusMap[entityStatus];\n\n  return (\n    <Badge\n      {...otherProps}\n      {...(withClockIcon\n        ? { size, startIcon: <ClockIcon testId=\"schedule-icon\" /> }\n        : { size })}\n      variant={variant}\n      ref={ref}\n    >\n      {entityStatus}\n    </Badge>\n  );\n}\n\nEntityStatusBadge.displayName = 'EntityStatusBadge';\n\nconst _EntityStatusBadge = React.forwardRef<\n  HTMLDivElement,\n  ExpandProps<EntityStatusBadgeProps>\n>(EntityStatusBadge);\nexport { _EntityStatusBadge as EntityStatusBadge };\n"],"mappings":""},"metadata":{},"sourceType":"module","externalDependencies":[]}